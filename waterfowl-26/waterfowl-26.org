
* Rules
:PROPERTIES:
:header-args: :tangle rules.mk :comments c
:END:


This file enables QMK features

These take extra memory and I don't debug usually. Lets turn them off.
#+begin_src c
CONSOLE_ENABLE = no         # Console for debug
COMMAND_ENABLE = no         # Commands for debug and configuration
#+end_src

Definitely want this, since I use some large chords
#+begin_src c
NKRO_ENABLE = yes           # Enable N-Key Rollover
#+end_src

Add mouse keys to support the rollers
#+begin_src c
MOUSEKEY_ENABLE = no
#+end_src

The board isn't equiped for this, so turn is off
#+begin_src c
BACKLIGHT_ENABLE = no       # Enable keyboard backlight functionality
RGBLIGHT_ENABLE = no        # Enable keyboard RGB underglow
AUDIO_ENABLE = no           # Audio output
#+end_src

It does have these features, so turn them on
#+begin_src c
OLED_ENABLE = yes        # Enables the use of OLED displays
SPLIT_KEYBOARD = yes     # Enables split functionality
ENCODER_ENABLE = no# Enables the encoders
#+end_src


The combo feature allows chording to send unique key codes
#+begin_src c
COMBO_ENABLE = no # Enables combos
#+end_src

Add in Caps Word to reduce the cost of shifting
#+begin_src c
CAPS_WORD_ENABLE = yes
#+end_src

* Headers
:PROPERTIES:
:header-args: :tangle config.h :comments org
:END:

#+begin_src c

#pragma once

#define OLED_DISPLAY_128X64

#define SPLIT_USB_DETECT

#define DOUBLE_TAP_SHIFT_TURNS_ON_CAPS_WORD

#+end_src

* Keymap
:PROPERTIES:
:header-args: :tangle keymap.c :comments org
:END:

This is the file that defines the actual keymaps and behaviour of the board

Thanks CyanDuck!!
#+begin_src c

/* Copyright 2022  CyanDuck
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <stdint.h>
#include QMK_KEYBOARD_H
#+end_src


** Layers
Create the layers we well use. The layers are:
- Base layer for mac
- Base layer for linux (not implemented)
- Base layer for windows (not implemented)
- Supershift (symbols)
- DeShift (numbers and arrow)
- Function Keys
- Window Management
#+begin_src c
// Defines names for use in layer keycodes and the keymap
enum layer_names {
    _HOME,
    _UP,
    _COLEMAK,
    _SUSHIFT,
    _SUSHIFT_UP,
    _DESHIFT,
    _FUNC,
    _SPOON,
    _COLELINX,
};
#+end_src

** Custom Keycodes
Custom keycodes for various arrows, useful in programming
#+begin_src c
enum custom_keycodes {
    QK_RARO = SAFE_RANGE,
    QK_LARO,
    QK_EARO,
    QK_LEQU,
    QK_GEQU,
    QK_SHRUGGIE,
    QK_ELXPIP,
};

bool process_record_user(uint16_t keycode, keyrecord_t *record) {
    switch (keycode) {
        case QK_RARO:
            if (record->event.pressed) {
                SEND_STRING("->");
            }
            break;
        case QK_LARO:
            if (record->event.pressed) {
                SEND_STRING("<-");
            }
            break;
        case QK_EARO:
            if (record->event.pressed) {
                SEND_STRING("=>");
            }
            break;
        case QK_LEQU:
            if (record->event.pressed) {
                SEND_STRING("<=");
            }
            break;
        case QK_GEQU:
            if (record->event.pressed) {
                SEND_STRING(">=");
            }
            break;
        case QK_ELXPIP:
            if (record->event.pressed) {
                SEND_STRING("|>");
            }
            break;
    }
    return true;
}
#+end_src

** Combo Keys
Add a combo for accessing the function keys


#+begin_src c
// const uint16_t PROGMEM function_keys[] = {KC_LSFT, KC_ESC, # COMBO_END};

//combo_t key_combos[] = {
//    COMBO(function_keys, MO(_FUNC)),
//};
#+end_src

** Layers

#+begin_src c
const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
#+end_src

*** Home
The bottom to rows of the standard colemak

#+NAME: colmak
| 1L | 2L | 3L | 4L  | 5L | L Roller | R Roller   | 1R    | 2R     | 3R | 4R | 5R |
| -  | -  | -  | -   | -  | -        | -          | -     | -      | -  | -  | -  |
| A  | R  | S  | T   | D  | -        | -          | H     | N      | E  | I  | O  |
| Z  | X  | C  | V   | B  | ESC      | Screenshot | K     | M      | ,  | .  | :  |
|    | 1  |    | TAB | UP | Shift    | Enter      | Space | Escape |    | 4  |    |

#+begin_src c
    [_HOME] = LAYOUT(
      KC_NO,KC_NO,KC_NO,KC_NO,KC_NO,KC_NO,KC_NO,KC_NO,KC_NO,KC_NO,
      MT(MOD_LGUI, KC_A), MT(MOD_LALT, KC_R), MT(MOD_LCTL, KC_S), KC_T, KC_D, KC_H, MT(MOD_LSFT, KC_N), MT(MOD_LCTL, KC_E), KC_I, MT(MOD_LGUI, KC_O),
      KC_Z, KC_X, KC_C, KC_V, KC_B, KC_K, KC_M, KC_COMM, KC_DOT, KC_SCLN,
      KC_1, LT(_SUSHIFT, KC_TAB), LT(_UP, KC_BSPC), KC_LSFT, KC_ESC, LGUI(LCTL(LSFT(KC_4))), KC_ENT, LT(_SPOON, KC_SPC), KC_ESC, KC_4),
#+end_src

*** Up
The top two rows of a standard colemak

#+NAME: colmak
| 1L | 2L | 3L | 4L      | 5L      | L Roller | R Roller | 1R  | 2R     | 3R | 4R | 5R |
| -  | -  | -  | -       | -       | -        | -        | -   | -      | -  | -  | -  |
| Q  | W  | F  | P       | G       | -        | -        | J   | L      | U  | Y  | "  |
| 1  | 2  | 3  | 4       | 5       | -        | -        | 6   | 7      | 8  | 9  | 0  |
|    | 1  |    | SuShift | DeShift | Shift    | Enter    | Tab | Escape |    | 4  |    |
|    |    |    |         |         |          |          |     |        |    |    |    |
#+begin_src c
    [_UP] = LAYOUT(
      KC_NO,KC_NO,KC_NO,KC_NO,KC_NO,KC_NO,KC_NO,KC_NO,KC_NO,KC_NO,
      KC_Q, KC_W, KC_F, KC_P, KC_G, KC_J, KC_L, KC_U, KC_Y, KC_QUOT,
      KC_1,KC_2,KC_3,KC_4,KC_5,KC_6,KC_7,KC_8,KC_9,KC_0,
      KC_1, MO(_SUSHIFT), KC_NO, KC_LSFT, KC_ESC, LGUI(LCTL(LSFT(KC_4))), KC_ENT, KC_TAB, KC_ESC, KC_4),
#+end_src

*** Super Shift

A layer for all the symbols. Includes commonly used arrows
| 1L | 2L | 3L | 4L | 5L        | L Roller | R Roller | 1R             | 2R      | 3R          | 4R | 5R |
| -  | -  | -  | -  | -         | -        | -        | -              | -       | -           | -  | -  |
| #  | !  | (  | )  | \pipe     | -        | -        | =              | < =     | equal arrow | >= | +  |
| $  | -  | {  | }  | &         | CAPS     | Numlock  | 0              | ~       | `           | ?  | *  |
| -  | 1  | -  | -  | Backspace | Shift    | -        | MO(SUSHIFT_UP) | Raycast | -           | 4  | -  |

#+begin_src c
    [_SUSHIFT] = LAYOUT(
      KC_NO,KC_NO,KC_NO,KC_NO,KC_NO,KC_NO,KC_NO,KC_NO,KC_NO,KC_NO,
      KC_HASH, KC_EXLM, KC_LPRN, KC_RPRN, KC_PIPE, KC_EQL, QK_LEQU, QK_EARO, QK_GEQU, KC_PLUS,
      KC_DLR, KC_MINUS, KC_LCBR, KC_RCBR, KC_AMPR, KC_0, KC_TILD, KC_GRV, KC_QUES, KC_ASTR,
      KC_1, KC_4, KC_BSPC, KC_LSFT, KC_CAPS, KC_NUM, KC_NO,MO(_SUSHIFT_UP), LGUI(KC_F2), KC_4),
#+end_src

*** Super Shift UP

A layer for all the symbols. Includes commonly used arrows
| 1L | 2L | 3L | 4L      | 5L        | L Roller | R Roller | 1R        | 2R      | 3R          | 4R | 5R |
| -  | -  | -  | -       | -         | -        | -        | -         | -       | -           | -  | -  |
| -  | -  | -  | -       | -         | -        | -        | _         | FunPipe | -           | -  | -  |
| %  | @  | [  | ]       | \         | -        | -        | /         | <-      | ->          | ^  | -  |
| -  | 1  | -  | Colmack | Backspace | Shift    | -        | Backspace | Raycast | -           | 4  | -  |

#+begin_src c
    [_SUSHIFT_UP] = LAYOUT(
      KC_NO,KC_NO,KC_NO,KC_NO,KC_NO,KC_NO,KC_NO,KC_NO,KC_NO,KC_NO,
      KC_NO,KC_NO,KC_NO,KC_NO,KC_NO,KC_UNDS,QK_ELXPIP,KC_NO,KC_NO,KC_NO,
      KC_PERC, KC_AT, KC_LBRC, KC_RBRC, KC_BSLS, KC_SLSH, QK_LARO, QK_RARO, KC_CIRC, KC_MINS,
      KC_1, TO(_COLEMAK), KC_BSPC, KC_LSFT, KC_CAPS, KC_NUM, KC_NO, KC_BSPC, LGUI(KC_F2), KC_4),
#+end_src

*** PaperWM Layer
Controlling windows in a tiling window manager
| 1L   | 2L   | 3L   | 4L     | 5L       | L Roller | R Roller | 1R     | 2R         | 3R   | 4R    | 5R             |
| -    | -    | -    | -      | -        | -        | -        | -      | -          | -    | -     | -              |
| size | full | up   | move 1 | suck in  | -        | -        | move 2 |            | up   |       | to main screen |
| shft | left | down | right  | barf out |          |          | move 3 | left       | Down | right | to laptop      |
|      |      |      |        |          |          |          | Center | fullscreen |      |       | to side screen |

#+begin_src c
    [_SPOON] = LAYOUT(
      KC_NO,       KC_NO,         KC_NO,        KC_NO,          KC_NO,      KC_NO,          KC_NO   ,KC_NO  ,KC_NO   ,KC_NO,
      LCAG(KC_R),  LCAG(KC_F),    LCAG(KC_UP),  HYPR(KC_1),     LCAG(KC_I),LCAG(LSFT(KC_2)),KC_NO   ,KC_UP  ,KC_NO   ,KC_NO,
      KC_LSFT,     LCAG(KC_LEFT), LCAG(KC_DOWN),LCAG(KC_RIGHT), LCAG(KC_O),LCAG(LSFT(KC_3)),KC_LEFT ,KC_DOWN,KC_RIGHT,KC_NO,
      KC_1, TO(_COLEMAK), LT(1, KC_SPC), KC_ESC, KC_CAPS, KC_NUM, KC_ENT, KC_BSPC, LT(2, KC_ENT), KC_4)
};
#+end_src

* Waterfowl
:PROPERTIES:
:header-args: :tangle waterfowl.c :comments org
:END:


This file controls hardware components of the board, including the duck

Copyright 2022  CyanDuck

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.

#+begin_src c
#include "quantum.h"
#+end_src

** Caps Words

#+begin_src c
#define DOUBLE_TAP_SHIFT_TURNS_ON_CAPS_WORD
#+end_src

** Encoders

The encoders (which don't work great because I'm bad at soldering) are:
- left encoder: forward/back in browser
- left roller: scroll vertically
- right encoder: do/undo
- right roller: scroll horizontally

#+begin_src c
#ifdef ENCODER_ENABLE
bool encoder_update_kb(uint8_t index, bool clockwise) {
    if (!encoder_update_user(index, clockwise)) {
        return false;
    }
    if (index == 0) { // Left Encoder
          if (clockwise) {
              tap_code16(G(KC_LBRC));
          } else {
              tap_code16(G(KC_RBRC));
          }
        } else if (index == 1) { // Left Roller
        if (clockwise) {
            tap_code(KC_MS_WH_DOWN);
        } else {
            tap_code(KC_MS_WH_UP);
        }
    } else if (index == 2) { // Right Encoder
         if (clockwise) {
            tap_code16(S(KC_MS_WH_DOWN));
        } else {
            tap_code16(S(KC_MS_WH_UP));
        }
   } else if (index == 3) { // Right Roller
        if (clockwise) {
            tap_code(KC_RIGHT);
        } else {
            tap_code(KC_LEFT);
        }
    }

    return true;
}
#endif
#+end_src

** The Duck

This section draws the duck. Also marks the active layer
#+begin_src c
#ifdef OLED_ENABLE
oled_rotation_t oled_init_kb(oled_rotation_t rotation) {
    if (is_keyboard_master() && is_keyboard_left()) {
        return OLED_ROTATION_90;
    } else {
        return OLED_ROTATION_270;
    }
}
bool oled_task_kb(void) {
   if (!oled_task_user()) {
       return false;
   }
   if (is_keyboard_master()) {
       // Host Keyboard Layer Status
       oled_write_P(PSTR("LAYER:\n"), false);
       oled_write_P(PSTR("\n"), false);

       switch (get_highest_layer(layer_state)) {
           case 0:
               oled_write_P(PSTR("DEFAULT\n\n\n\n"), false);
               break;
           case 1:
               oled_write_P(PSTR("UP\n\n\n\n"), false);
               break;
           case 2:
               oled_write_P(PSTR("DeShift\n\n\n\n"), false);
               break;
           case 3:
               oled_write_P(PSTR("SuShift\n\n\n\n"), false);
               break;
           case 4:
               oled_write_P(PSTR("SuShift Up\n\n\n\n"), false);
               break;
           case 5:
               oled_write_P(PSTR("SuShift Up\n\n\n\n"), false);
        case 6:
               oled_write_P(PSTR("SuShift Up\n\n\n\n"), false);
           default:
               oled_write_ln_P(PSTR("Undefined"), false);
                               };
    } else {
  static const char PROGMEM my_logo[] = {
    // Paste the code from the previous step below this line!
    // 'waterfowl for OLED', 64x128px
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x80, 0xc0, 0x40, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x80, 0xc0, 0x40, 0x20, 0x10, 0x10, 0x08, 0x0c, 0x04, 0x04, 0x02, 0x02, 0x02, 0x01,
0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x1a, 0x26, 0x40,
0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0,
0x1c, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x1e, 0x16, 0x1c, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x03, 0x0c, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf0, 0xfc, 0xff,
0x78, 0xf8, 0xfc, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x1e, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xe0, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xfc,
0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x3f, 0x1e, 0x1c, 0x1c, 0x14, 0x10, 0x10, 0x08, 0x08, 0x10, 0x10,
0x10, 0x10, 0x10, 0x30, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x38, 0x7c, 0x7e, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x0f, 0x0f, 0x07, 0x03,
0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0xc0, 0x38, 0x0e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x38,
0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x3c, 0x03, 0x80,
0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x80, 0x80, 0xc0, 0x40, 0x7f, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x04, 0x0c, 0x0c, 0x0c, 0x04, 0x07, 0x02, 0x03, 0x01,
0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x03, 0x03, 0x02, 0x06, 0x06, 0x06,
0x02, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        };

        oled_write_raw_P(my_logo, sizeof(my_logo));
    }
    return true;
}
#endif
#+end_src
